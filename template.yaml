AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM deployment template for OCSF transformation library

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300
    MemorySize: 512

Parameters:
  LogEventSource:
    Type: String
    AllowedValues:
      - S3Bucket
      - KinesisDataStream
    Description: Source of raw logs for the custom source.

  ASLCustomLogSourceLocation:
    Type: String
    AllowedPattern: ".+"
    Description: Amazon Security Lake (ASL) custom source S3 location excluding the trailing slash (eg. my_bucket/ext/my_custom_source).

  RawLogS3BucketName:
    Type: String
    Description: Name of the customer managed S3 bucket which stores the raw log data. If you leave this parameter blank, the template will create an S3 bucket to store the raw logs.
    
  KinesisUserARNs:
    Type: List<String>
    Description: ARNs of IAM identities associated with servers and EC2 instances running the Kinesis Agent for log streaming.

  KinesisStreamEncryptionKeyAdminARNs:
    Type: List<String>
    Description: ARNs of IAM identities that administer the CMK used for Kinesis stream encryption, please include the user that deploys the SAM package.

Conditions:
  IsS3Backed: !Equals [ !Ref LogEventSource, 'S3Bucket' ]
  IsKinesisBacked: !Equals [ !Ref LogEventSource, 'KinesisDataStream' ]
  CreateKinesisAgentRole: !And [ !Equals [ !Ref LogEventSource, 'KinesisDataStream' ], !Not [!Equals [!Join ['', !Ref KinesisUserARNs], '']]]
  CreateKinesisCMK: !And [ !Equals [ !Ref LogEventSource, 'KinesisDataStream' ], !Not [!Equals [!Join ['', !Ref KinesisStreamEncryptionKeyAdminARNs], '']]]
  UseAWSManagedKinesisKey: !And [ !Equals [ !Ref LogEventSource, 'KinesisDataStream' ], !Equals [!Join ['', !Ref KinesisStreamEncryptionKeyAdminARNs], '']]
  CreateStagingS3Bucket: !And [ !Equals [ !Ref LogEventSource, 'S3Bucket' ], !Equals [!Ref RawLogS3BucketName, '']]

Resources:

  KinesisBackedTransformationLambdaExecutionRole:
    Condition: IsKinesisBacked
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['',[ !Ref AWS::StackName, '-KinesisLambdaExecutionRole' ]]
      Policies:
      - PolicyName: KinesisBackedTransformationLambdaExecutionRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: KinesisReadWrite
              Effect: Allow
              Action:
                - kinesis:PutRecord
                - kinesis:PutRecords
                - kinesis:DescribeStream
                - kinesis:DescribeStreamSummary
                - kinesis:GetRecords
                - kinesis:GetShardIterator
                - kinesis:ListShards
                - kinesis:ListStreams
                - kinesis:SubscribeToShard
              Resource: '*'
            - Sid: KMSAccess
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource: '*'
            - Sid: LogGroupCreate
              Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Sid: LogsWrite
              Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'
            - Sid: S3Write
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: !Sub 'arn:aws:s3:::${ASLCustomLogSourceLocation}/*'
            - Sid: TracingWithXRay
              Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
                - xray:GetSamplingRules
                - xray:GetSamplingTargets
                - xray:GetSamplingStatisticSummaries
              Resource: '*'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  CMKEncryptedKinesisBackedTransformationLambdaFunction:
    Condition: CreateKinesisCMK
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./transformation-function/
      Handler: app.lambda_handler
      Runtime: python3.10
      Tracing: Active
      ReservedConcurrentExecutions: 10
      Role: !GetAtt KinesisBackedTransformationLambdaExecutionRole.Arn
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python310:5'
      Environment:
        Variables:
          SEC_LAKE_BUCKET:
            Ref: ASLCustomLogSourceLocation
          DEBUG: false
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt CMKEncryptedLogCollectionStream.Arn
            BatchSize: 100
            StartingPosition: LATEST

  KinesisBackedTransformationLambdaFunction:
    Condition: UseAWSManagedKinesisKey
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./transformation-function/
      Handler: app.lambda_handler
      Runtime: python3.10
      Tracing: Active
      ReservedConcurrentExecutions: 10
      Role: !GetAtt KinesisBackedTransformationLambdaExecutionRole.Arn
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python310:5'
      Environment:
        Variables:
          SEC_LAKE_BUCKET:
            Ref: ASLCustomLogSourceLocation
          DEBUG: false
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt LogCollectionStream.Arn
            BatchSize: 100
            StartingPosition: LATEST

  KinesisStreamKey:
    Condition: CreateKinesisCMK
    Type: AWS::KMS::Key
    DependsOn:
      - KinesisBackedTransformationLambdaExecutionRole
      - KinesisAgentIAMRole
    Properties:
      Enabled: True
      EnableKeyRotation: True
      KeyPolicy:
        Version: 2012-10-17
        Id: KinesisStreamKeyPolicy
        Statement:
          - Sid: Allow IAM access delegation
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow access to key administrators
            Effect: Allow
            Principal:
              AWS: !Ref KinesisStreamEncryptionKeyAdminARNs
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow access to decrypt
            Effect: Allow
            Principal:
              AWS: !Join ['',[ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/', !Ref AWS::StackName, '-KinesisLambdaExecutionRole' ]]
            Action:
              - kms:Decrypt
            Resource: '*'
          - Sid: Allow access to generate data key
            Effect: Allow
            Principal:
              AWS: !Join ['',[ 'arn:aws:iam::', !Ref AWS::AccountId, ':role/', !Ref AWS::StackName, '-KinesisAgentRole' ]]
            Action:
              - kms:GenerateDataKey
            Resource: '*'

  CMKEncryptedLogCollectionStream:
    Condition: CreateKinesisCMK
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: !Ref KinesisStreamKey

  LogCollectionStream:
    Condition: UseAWSManagedKinesisKey
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  KinesisAgentIAMRole:
    Condition: CreateKinesisAgentRole
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['',[ !Ref AWS::StackName, '-KinesisAgentRole' ]]
      Policies:
      - PolicyName: KinesisAgentIAMPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
              - Sid: KinesisWrite
                Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Resource: '*'
              - Sid: KMSAccess
                Effect: Allow
                Action:
                  - kms:GenerateDataKey
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref KinesisUserARNs
            Action:
              - sts:AssumeRole

  SqsQueue:
    Condition: IsS3Backed
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 1200

  SQSQueuePolicy:
    Condition: IsS3Backed
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "s3.amazonaws.com"
            Action: sqs:SendMessage
            Resource: !GetAtt SqsQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !If [ CreateStagingS3Bucket, !Join ['',['arn:aws:s3:::', !Ref AWS::StackName, '-staging-log-bucket' ]], !Join ['',['arn:aws:s3:::', !Ref RawLogS3BucketName]]]
      Queues:
        - Ref: SqsQueue

  StagingLogBucket:
    Condition: CreateStagingS3Bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['',[ !Ref AWS::StackName, '-staging-log-bucket' ]]
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:Put
            Queue: !GetAtt SqsQueue.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: '.log.gz'
    DependsOn : SqsQueue

  StagingLogBucketPolicy:
    Condition: CreateStagingS3Bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StagingLogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSLogDeliveryWrite
            Action:
              - s3:PutObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${StagingLogBucket}/*'
            Principal:
              Service: delivery.logs.amazonaws.com
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"
          - Sid: AWSLogDeliveryAclCheck
            Action:
              - s3:GetBucketAcl
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${StagingLogBucket}'
            Principal:
              Service: delivery.logs.amazonaws.com

  S3BackedTransformationLambdaExecutionRole:
    Condition: IsS3Backed
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['',[ !Ref AWS::StackName, '-S3LambdaExecutionRole' ]]
      Policies:
      - PolicyName: S3BackedTransformationLambdaExecutionRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: S3Read
              Effect: Allow
              Action:
                - s3:GetObject*
              Resource: !If [ CreateStagingS3Bucket, !Join ['',['arn:aws:s3:::', !Ref AWS::StackName, '-staging-log-bucket', '/*' ]], !Join ['',['arn:aws:s3:::', !Ref RawLogS3BucketName, '/*']]]
            - Sid: LogGroupCreate
              Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            - Sid: LogsWrite
              Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'
            - Sid: S3Write
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: !Sub 'arn:aws:s3:::${ASLCustomLogSourceLocation}/*'
            - Sid: TracingWithXRay
              Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
                - xray:GetSamplingRules
                - xray:GetSamplingTargets
                - xray:GetSamplingStatisticSummaries
              Resource: '*'
            - Sid: SQSTrigger
              Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
              Resource: !GetAtt SqsQueue.Arn

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  S3BackedTransformationLambdaFunction:
    Condition: IsS3Backed
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./transformation-function/
      Handler: app.lambda_handler
      Runtime: python3.10
      Tracing: Active
      ReservedConcurrentExecutions: 10
      Role: !GetAtt S3BackedTransformationLambdaExecutionRole.Arn
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python310:5'
      Environment:
        Variables:
          SEC_LAKE_BUCKET:
            Ref: ASLCustomLogSourceLocation
          DEBUG: false
      Events:
        SQSEventTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SqsQueue.Arn
            BatchSize: 10

Outputs:
  KinesisBackedTransformationLambdaFunctionARN:
    Condition: UseAWSManagedKinesisKey
    Description: OCSF Transformation Lambda Function ARN
    Value: !GetAtt KinesisBackedTransformationLambdaFunction.Arn

  CMKEncryptedKinesisBackedTransformationLambdaFunction:
    Condition: CreateKinesisCMK
    Description: OCSF Transformation Lambda Function ARN
    Value: !GetAtt CMKEncryptedKinesisBackedTransformationLambdaFunction.Arn

  S3BackedTransformationLambdaFunctionARN:
    Condition: IsS3Backed
    Description: OCSF Transformation Lambda Function ARN
    Value: !GetAtt S3BackedTransformationLambdaFunction.Arn

  StagingLogBucketARN:
    Condition: CreateStagingS3Bucket
    Description: Name of the bucket for temporary log storage.
    Value: !GetAtt StagingLogBucket.Arn

  CMKEncryptedLogCollectionStreamName:
    Condition: CreateKinesisCMK
    Description: Name of the log collection Kinesis Stream
    Value: !Ref CMKEncryptedLogCollectionStream

  LogCollectionStreamName:
    Condition: UseAWSManagedKinesisKey
    Description: Name of the log collection Kinesis Stream
    Value: !Ref LogCollectionStream

  KinesisAgentIAMRoleARN:
    Condition: CreateKinesisAgentRole
    Description: ARN of the IAM role created for Kinesis agent to assume for log streaming.
    Value: !GetAtt KinesisAgentIAMRole.Arn