AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  amazon-security-lake-transformation-lambda

  SAM deployment template for amazon-security-lake-transformation-lambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15
    MemorySize: 128

Parameters:
  ASLCustomLogSourceLocation:
    Type: String
    Description: Amazon Security Lake (ASL) S3 bucket name with custom log location including the trailing slash (eg. my_bucket/ext/my_custom_source/)

  SourceKinesisUserARNs:
    Type: List<String>
    Description: ARNs of IAM entities associated with servers and EC2 instances running the Kinesis Agent for log streaming.

Conditions:
  CreateKinesisAgentRole: !Not [!Equals [!Join ['', !Ref SourceKinesisUserARNs], '']]

Resources:

  OCSFTransformationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
      - PolicyName: OCSFTransformationLambdaExecutionRolePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: KinesisReadWrite
              Effect: Allow
              Action:
                - kinesis:PutRecord
                - kinesis:PutRecords
                - kinesis:DescribeStream
                - kinesis:DescribeStreamSummary
                - kinesis:GetRecords
                - kinesis:GetShardIterator
                - kinesis:ListShards
                - kinesis:ListStreams
                - kinesis:SubscribeToShard
              Resource: !GetAtt LogCollectionStream.Arn
            - Sid: LogsCreateWrite
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'
            - Sid: S3Write
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: !Sub 'arn:aws:s3:::${ASLCustomLogSourceLocation}*'
            - Sid: TracingWithXRay
              Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
                - xray:GetSamplingRules
                - xray:GetSamplingTargets
                - xray:GetSamplingStatisticSummaries
              Resource: '*'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  OCSFTransformationLambdaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: lambda/
      Handler: app.lambda_handler
      Runtime: python3.10
      Tracing: Active
      ReservedConcurrentExecutions: 10
      Role: !GetAtt OCSFTransformationLambdaExecutionRole.Arn
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:336392948345:layer:AWSSDKPandas-Python310:5'
      Environment:
        Variables:
          SEC_LAKE_BUCKET:
            Ref: ASLCustomLogSourceLocation
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt LogCollectionStream.Arn
            BatchSize: 100
            StartingPosition: LATEST

  LogCollectionStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  KinesisAgentIAMRole:
    Type: AWS::IAM::Role
    Condition: CreateKinesisAgentRole
    Properties:
      Policies:
      - PolicyName: KinesisAgentIAMPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
              - Sid: KinesisWrite
                Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Resource: !GetAtt LogCollectionStream.Arn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref SourceKinesisUserARNs
            Action:
              - sts:AssumeRole

Outputs:
  OCSFTransformationLambdaFunctionARN:
    Description: "OCSF Transformation Lambda Function ARN"
    Value: !GetAtt OCSFTransformationLambdaFunction.Arn

  LogCollectionStreamName:
    Description: "Name of the log collection Kinesis Stream"
    Value: !Ref LogCollectionStream

  KinesisAgentIAMRoleARN:
    Condition: CreateKinesisAgentRole
    Description: ARN of the IAM role created for Kinesis agent to assume for log streaming.
    Value: !GetAtt KinesisAgentIAMRole.Arn